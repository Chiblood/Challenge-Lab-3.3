/* Challenge Lab 3.3
3. Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Input: nums = [2,7,11,15], target = 9

Output: [0,1]

Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].

 lets try a brute force solution first
 then find a more efficient solution?
  hash map?
*/

public class Solution
{
    public int[] TwoSum(int[] nums, int target)
    {
        // Brute force solution
        for (int i = 0; i < nums.Length; i++)
        {
            for (int j = i + 1; j < nums.Length; j++)
            {
                // checking code
                Console.WriteLine($"Current numbers: {nums[i]} (index {i}) and {nums[j]} (index {j})");
                if (nums[i] + nums[j] == target)
                {
                    // checking code
                    Console.WriteLine($"Found numbers: {nums[i]} (index {i}) + {nums[j]} (index {j}) = {target}");
                    return new int[] { i, j };
                }
            }
        }
        throw new ArgumentException("No two sum solution");
    }

    // More efficient solution using a hash map GENERATED BY MS GITHUB COPILOT
    public int[] TwoSumHashMap(int[] nums, int target)
    {
        Dictionary<int, int> numDict = new Dictionary<int, int>();
        for (int i = 0; i < nums.Length; i++)
        {
            // checking code
            Console.WriteLine($"Current number: {nums[i]} (index {i}), looking for complement: {target - nums[i]}");
            int complement = target - nums[i];
            if (numDict.ContainsKey(complement))
            {
                // checking code
                Console.WriteLine($"Found numbers: {nums[numDict[complement]]} (index {numDict[complement]}) + {nums[i]} (index {i}) = {target}");
                return new int[] { numDict[complement], i };
            }
            numDict[nums[i]] = i;
        }
        throw new ArgumentException("No two sum solution");
    }
    public static void Main(string[] args)
    {
        int[] nums = { 2, 7, 11, 15 };
        int target = 26;
        Solution solution = new Solution();
        int[] result = solution.TwoSum(nums, target);
        Console.WriteLine($"Indices of the two numbers that add up to {target} are: [{result[0]}, {result[1]}]");
        int[] resultHashMap = solution.TwoSumHashMap(nums, target);
        Console.WriteLine($"(HashMap) Indices of the two numbers that add up to {target} are: [{resultHashMap[0]}, {resultHashMap[1]}]");
    }
}